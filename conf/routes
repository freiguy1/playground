# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

#####################################
#             MCISCUP               #
#####################################
GET	/mcisCup		    controllers.mcisCup.Application.index
GET	/mcisCup/admin		    controllers.mcisCup.Application.admin

POST	/mcisCup/teams		    controllers.mcisCup.Application.addTeam
DELETE	/mcisCup/teams/:teamId	    controllers.mcisCup.Application.deleteTeam(teamId: Int)
PUT	/mcisCup/teams/:teamId	    controllers.mcisCup.Application.updateTeam(teamId: Int)

POST	/mcisCup/competitions			controllers.mcisCup.Application.addCompetition
DELETE	/mcisCup/competitions/:competitionId	controllers.mcisCup.Application.deleteCompetition(competitionId: Int)
PUT	/mcisCup/competitions/:competitionId	controllers.mcisCup.Application.updateCompetition(competitionId: Int)

PUT	/mcisCup/competitions/:competitionId/teams/:teamId  controllers.mcisCup.Application.addOrUpdateResult(competitionId: Int, teamId: Int)

PUT	/mcisCup/nextCompetitionInfo		controllers.mcisCup.Application.addNextCompetitionInfo

GET	/mcisCup/info		    controllers.mcisCup.Application.info


#####################################
#           BALANCE                 #
#####################################
GET	/balance		    controllers.balance.Application.index
POST	/balance		    controllers.balance.Application.addTransaction(amount: Double, note: Option[String])
GET	/balance/info		    controllers.balance.Application.getInfo
PUT	/balance/clearTransactionsThrough/:transactionId controllers.balance.Application.clearTransactionsThrough(transactionId: Int)

#####################################
#             CLONE                 #
#####################################

GET	/clone				controllers.clone.Application.index
GET	/clone/itsMe				controllers.clone.Application.itsMe

#    ########################
#    #         API          #
#    ########################

GET	/clone/api/systems		controllers.clone.api.SystemApi.get
GET	/clone/api/belts		controllers.clone.api.BeltApi.get
POST	/clone/api/belts/:id/hasRats	controllers.clone.api.BeltApi.hasRats(id: Long)
POST	/clone/api/belts/:id/isEmpty	controllers.clone.api.BeltApi.isEmpty(id: Long)
PUT	/clone/api/belts/:id/clear	controllers.clone.api.BeltApi.clear(id: Long)
GET	/clone/api/time			controllers.clone.api.BaseApi.time


#####################################
#              CHILI                #
#####################################
GET    /chili        controllers.chili.Application.index
GET    /chili/admin  controllers.chili.Application.admin

#    ########################
#    #         API          #
#    ########################

GET    /chili/entries/:id/votes controllers.chili.Application.getVotesByEntry(id: Int)
POST   /chili/entries/:id/votes controllers.chili.Application.addVote(id: Int)
GET    /chili/:uuid             controllers.chili.Application.uuidUpdateEntry(uuid: String)
POST   /chili/:uuid             controllers.chili.Application.uuidUpdateEntrySubmit(uuid: String)

GET    /chili/entries         controllers.chili.Application.getEntries
GET    /chili/entries/:id     controllers.chili.Application.getEntry(id: Int)
PUT    /chili/entries/:id     controllers.chili.Application.updateEntry(id: Int)
POST   /chili/entries         controllers.chili.Application.addEntry
DELETE /chili/entries/:id     controllers.chili.Application.deleteEntry(id: Int)



#################################
###        SECURE SOCIAL      ###
#################################
# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized
